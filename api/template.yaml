AWSTemplateFormatVersion: "2010-09-09"
Description: "Heart API"
Transform: "AWS::Serverless-2016-10-31"


Globals:
  Function:
    Runtime: python3.13
    Handler: app.handler
    Timeout: 5

Parameters:
  Env:
    Type: String
    AllowedValues:
      - dev
      - prod
  WorkoutsDatabaseName:
    Type: String
    Default: "workouts"

Mappings:
  Env:
    dev:
      AccountDeletionOffset: 1 # days
      LogRetention: 3 # days
      UploadBucket: "583168578067-upload"
      MediaBucket: "583168578067-user-media"
      NeedDatabaseDeletionProtection: false
    prod:
      AccountDeletionOffset: 1 # days
      LogRetention: 90 # days
      NeedDatabaseDeletionProtection: true


Resources:
  WorkoutsDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled:
        Fn::FindInMap: [ Env, !Ref Env, NeedDatabaseDeletionProtection ]
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TableName: !Ref WorkoutsDatabaseName

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "heart-api"
      Description: "Heart of yours API"

  Exercise:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref Api
      ContentType: application/json
      Name: "Exercise"
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: "Exercise"
        type: "object"
        required:
          - name
          - category
          - target
        properties:
          name:
            type: string
          category:
            type: string
            enum:
              - "Weighted Body Weight"
              - "Assisted Body Weight"
              - "Reps Only"
              - "Cardio"
              - "Duration"
              - "Machine"
              - "Dumbbell"
              - "Barbell"
          target:
            type: string
            enum:
              - "Core"
              - "Arms"
              - "Back"
              - "Chest"
              - "Legs"
              - "Shoulders"
              - "Other"
              - "Olympic"
              - "Full Body"
              - "Cardio"
          asset:
            type: string
          thumbnail:
            type: string
          instructions:
            type: string

  ExerciseResponse:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref Api
      ContentType: application/json
      Name: "ExerciseListResponse"
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: "ExerciseListResponse"
        type: "object"
        required:
          - exercises
        properties:
          exercises:
            type: array
            items:
              "$ref": !Sub "https://apigateway.amazonaws.com/restapis/${Api}/models/Exercise"

  Set:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref Api
      ContentType: application/json
      Name: "Set"
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: "Set"
        type: "object"
        required:
          - id
          - completed
          - weight
          - reps
          - duration
          - distance
        properties:
          id:
            type: string
          completed:
            type: boolean
            minimum: 0
          weight:
            type: number
            minimum: 0
          reps:
            type: number
            minimum: 0
          duration:
            type: number
            minimum: 0
          distance:
            type: number
            minimum: 0

  WorkoutExercise:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref Api
      ContentType: application/json
      Name: "WorkoutExercise"
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: "WorkoutExercise"
        type: "object"
        required:
          - id
          - exercise
          - sets
        properties:
          id:
            type: string
          exercise:
            type: string
            minimum: 0
          sets:
            type: array
            items:
              "$ref": !Sub "https://apigateway.amazonaws.com/restapis/${Api}/models/Set"

  Workout:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref Api
      ContentType: application/json
      Name: "Workout"
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: "Workout"
        type: "object"
        required:
          - start
          - exercises
        properties:
          id:
            type: string
          name:
            type: string
          start:
            type: string
          end:
            type: string
          exercises:
            type: array
            items:
              "$ref": !Sub "https://apigateway.amazonaws.com/restapis/${Api}/models/WorkoutExercise"

  ScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: "account-deletions"

  MonitoringTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "monitoring-notifications"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - scheduler.amazonaws.com
                - apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "ApiPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:heart-*"
              - Effect: Allow
                Action:
                  - scheduler:CreateSchedule
                  - scheduler:DeleteSchedule
                Resource:
                  - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${ScheduleGroup}"
                  - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${ScheduleGroup}/*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/heart-*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, UploadBucket ]
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, MediaBucket ]
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/avatars/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, MediaBucket ]
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref MonitoringTopic
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt WorkoutsDatabase.Arn

  AccountsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "accounts"
      RestApiId: !Ref Api

  FeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "feedback"
      RestApiId: !Ref Api

  WorkoutsListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "workouts"
      RestApiId: !Ref Api

  WorkoutsDetailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref WorkoutsListResource
      PathPart: "{workoutId}"
      RestApiId: !Ref Api

  ExercisesListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "exercises"
      RestApiId: !Ref Api

  AccountsDetailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AccountsResource
      PathPart: "{accountId}"
      RestApiId: !Ref Api

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizer
      Description: "Part of Heart API: authorizer"
      FunctionName: "heart-authorizer"
      Layers:
        - arn:aws:lambda:ca-central-1:583168578067:layer:firebase:2
      Role: !GetAtt LambdaExecutionRole.Arn

  #  BackgroundFunction:
  #    Type: AWS::Serverless::Function
  #    Properties:
  #      CodeUri: ./background
  #      Description: "Part of Heart API: background handler"
  #      FunctionName: "heart-background"
  #      Layers:
  #        - arn:aws:lambda:ca-central-1:583168578067:layer:firebase:2
  #      Role: !GetAtt LambdaExecutionRole.Arn

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./api
      Description: "Part of Heart API: API handler"
      Environment:
        Variables:
          ACCOUNT_DELETION_OFFSET: !FindInMap [ Env, !Ref Env, AccountDeletionOffset ]
          #          BACKGROUND_FUNCTION: !GetAtt BackgroundFunction.Arn
          BACKGROUND_ROLE: !GetAtt LambdaExecutionRole.Arn
          SCHEDULE_GROUP: !Ref ScheduleGroup
          MEDIA_BUCKET: !FindInMap [ Env, !Ref Env, MediaBucket ]
          MONITORING_TOPIC: !Ref MonitoringTopic
          UPLOAD_BUCKET: !FindInMap [ Env, !Ref Env, UploadBucket ]
      FunctionName: "heart-api"
      Layers:
        - arn:aws:lambda:ca-central-1:583168578067:layer:firebase:2
        - arn:aws:lambda:ca-central-1:583168578067:layer:dynamo-utils:2
      Role: !GetAtt LambdaExecutionRole.Arn

  ApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub  "/aws/lambda/${ApiFunction}"
      RetentionInDays: !FindInMap [ Env, !Ref Env, LogRetention ]

  AuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub  "/aws/lambda/${AuthorizerFunction}"
      RetentionInDays: !FindInMap [ Env, !Ref Env, LogRetention ]

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ApiFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*"
        - Api: !Ref Api

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*"
        - Api: !Ref Api

  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations"
        - Function: !GetAtt AuthorizerFunction.Arn
      IdentitySource: method.request.header.Authorization
      Name: "main-authorizer"
      RestApiId: !Ref Api
      Type: REQUEST

  DeleteAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: DELETE
      ResourceId: !Ref AccountsDetailResource
      RestApiId: !Ref Api
      OperationName: "delete-account"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  EditAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: PUT
      ResourceId: !Ref AccountsDetailResource
      RestApiId: !Ref Api
      OperationName: "edit-account"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  LeaveFeedbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: POST
      ResourceId: !Ref FeedbackResource
      RestApiId: !Ref Api
      OperationName: "leave-feedback"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  CreateWorkoutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: POST
      ResourceId: !Ref WorkoutsListResource
      RestApiId: !Ref Api
      OperationName: "save-workout"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  DeleteWorkoutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: DELETE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem"
        Credentials: !GetAtt LambdaExecutionRole.Arn
        RequestTemplates:
          application/json: !Sub |
            {
              "TableName": "${WorkoutsDatabaseName}",
              "Key": {
                "PK": {
                  "S": "USER#$context.authorizer.principalId"
                },
                "SK": {
                  "S": "WORKOUT#$input.params('workoutId')"
                }
              }
            }
        IntegrationResponses:
          - StatusCode: 204
      MethodResponses:
        - StatusCode: 204
      ResourceId: !Ref WorkoutsDetailResource
      RestApiId: !Ref Api
      RequestParameters:
        method.request.path.workoutId: true

  ListWorkoutsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: GET
      ResourceId: !Ref WorkoutsListResource
      RestApiId: !Ref Api
      OperationName: "list-workouts"
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
        Credentials: !GetAtt LambdaExecutionRole.Arn
        RequestTemplates:
          application/json: !Sub |
            {
              "TableName": "${WorkoutsDatabaseName}",
              "KeyConditionExpression": "#PK = :PK AND begins_with( #SK , :PREFIX )",
              "ExpressionAttributeNames": {
                "#PK": "PK",
                "#SK": "SK"
              },
              "ExpressionAttributeValues": {
                ":PK": { "S": "USER#$context.authorizer.principalId" },
                ":PREFIX": { "S": "WORKOUT" }
              },
              "ScanIndexForward": true
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {
                  "workouts": [
                  #foreach($item in $input.path('$.Items'))
                    {
                      "id": "$item.SK.S.replace("WORKOUT#", "")",
                      "start": "$item.start.S",
                      "end": #if($item.end != "") "$item.end.S" #else null #end,
                      "name": #if($item.name != "") "$item.name.S" #else null #end,
                      "exercises": [
                        #foreach($ex in $item.exercises.L)
                          {
                            "id": "$ex.M.id.S",
                            "exercise": "$ex.M.exercise.S",
                            "sets": [
                              #foreach($set in $ex.M.sets.L)
                                {
                                  "id": "$set.M.id.S",
                                  "reps": #if($set.M.reps != "") $set.M.reps.N #else null #end,
                                  "weight": #if($set.M.weight != "") $set.M.weight.N #else null #end,
                                  "duration": #if($set.M.duration != "") $set.M.duration.N #else null #end,
                                  "distance": #if($set.M.distance != "") $set.M.distance.N #else null #end,
                                  "completed": #if($set.M.completed != "") $set.M.completed.BOOL #else null #end 
                                }#if($foreach.hasNext),#end
                              #end
                            ]
                          }#if($foreach.hasNext),#end
                        #end
                      ]
                    }#if($foreach.hasNext),#end
                  #end
                  ]
                }
      MethodResponses:
        - StatusCode: 200

  GetExercisesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        Credentials: !GetAtt LambdaExecutionRole.Arn
        RequestTemplates:
          application/json: !Sub |
            {
              "TableName": "${WorkoutsDatabaseName}",
              "KeyConditionExpression": "PK = :PK",
              "ExpressionAttributeValues": {
                ":PK": { "S": "EXERCISE" }
              }
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                #set($items = $input.path('$.Items'))
                {
                  "exercises": [
                  #foreach($item in $items)
                    {
                      "name": "$item.SK.S",
                      "category": "$item.category.S",
                      "target": "$item.target.S",
                      "asset": #if($item.asset != "") "$item.asset.S" #else null #end, 
                      "thumbnail": #if($item.thumbnail != "") "$item.thumbnail.S" #else null #end,
                      "instructions": #if($item.instructions != "") "$item.instructions.S" #else null #end
                    }#if($foreach.hasNext),#end
                  #end
                  ]
                }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref ExerciseResponse
      OperationName: "list-exercises"
      ResourceId: !Ref ExercisesListResource
      RestApiId: !Ref Api

  AccountInfoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: GET
      ResourceId: !Ref AccountsDetailResource
      RestApiId: !Ref Api
      OperationName: "account-info"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - EditAccountMethod
      - DeleteAccountMethod
      - GetExercisesMethod
      - ListWorkoutsMethod
      - CreateWorkoutMethod
      - DeleteWorkoutMethod
    Properties:
      RestApiId: !Ref Api

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "api"
      RestApiId: !Ref Api
      DeploymentId: !Ref Deployment

