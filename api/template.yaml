AWSTemplateFormatVersion: "2010-09-09"
Description: "Heart API"
Transform: "AWS::Serverless-2016-10-31"


Globals:
  Function:
    Runtime: python3.13
    Handler: app.handler
    Timeout: 5

Parameters:
  Env:
    Type: String
    AllowedValues:
      - dev
      - prod

Mappings:
  Env:
    dev:
      AccountDeletionOffset: 1 # days
      LogRetention: 3 # days
      UploadBucket: "583168578067-upload"
      MediaBucket: "583168578067-user-media"
    prod:
      AccountDeletionOffset: 1 # days
      LogRetention: 90 # days


Resources:
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "heart-api"
      Description: "Heart of yours API"

  ScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: "account-deletions"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - scheduler.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "ApiPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:heart-*"
              - Effect: Allow
                Action:
                  - scheduler:CreateSchedule
                  - scheduler:DeleteSchedule
                Resource:
                  - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${ScheduleGroup}"
                  - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${ScheduleGroup}/*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/heart-*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, UploadBucket ]
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/*"
                    - Bucket: !FindInMap [ Env, !Ref Env, MediaBucket ]

  AccountsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "accounts"
      RestApiId: !Ref Api

  AccountsDetailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AccountsResource
      PathPart: "{accountId}"
      RestApiId: !Ref Api

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizer
      Description: "Part of Heart API: authorizer"
      FunctionName: "heart-authorizer"
      Layers:
        - arn:aws:lambda:ca-central-1:583168578067:layer:firebase:2
      Role: !GetAtt LambdaExecutionRole.Arn

#  BackgroundFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ./background
#      Description: "Part of Heart API: background handler"
#      FunctionName: "heart-background"
#      Layers:
#        - arn:aws:lambda:ca-central-1:583168578067:layer:firebase:2
#      Role: !GetAtt LambdaExecutionRole.Arn

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./api
      Description: "Part of Heart API: API handler"
      Environment:
        Variables:
          ACCOUNT_DELETION_OFFSET: !FindInMap [ Env, !Ref Env, AccountDeletionOffset ]
#          BACKGROUND_FUNCTION: !GetAtt BackgroundFunction.Arn
          BACKGROUND_ROLE: !GetAtt LambdaExecutionRole.Arn
          SCHEDULE_GROUP: !Ref ScheduleGroup
          MEDIA_BUCKET: !FindInMap [ Env, !Ref Env, MediaBucket ]
          UPLOAD_BUCKET: !FindInMap [ Env, !Ref Env, UploadBucket ]
      FunctionName: "heart-api"
      Layers:
        - arn:aws:lambda:ca-central-1:583168578067:layer:firebase:2
      Role: !GetAtt LambdaExecutionRole.Arn

  ApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub  "/aws/lambda/${ApiFunction}"
      RetentionInDays: !FindInMap [ Env, !Ref Env, LogRetention ]

  AuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub  "/aws/lambda/${AuthorizerFunction}"
      RetentionInDays: !FindInMap [ Env, !Ref Env, LogRetention ]

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ApiFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*"
        - Api: !Ref Api

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*"
        - Api: !Ref Api

  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations"
        - Function: !GetAtt AuthorizerFunction.Arn
      IdentitySource: method.request.header.Authorization
      Name: "main-authorizer"
      RestApiId: !Ref Api
      Type: REQUEST

  DeleteAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: DELETE
      ResourceId: !Ref AccountsDetailResource
      RestApiId: !Ref Api
      OperationName: "delete-account"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  EditAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: PUT
      ResourceId: !Ref AccountsDetailResource
      RestApiId: !Ref Api
      OperationName: "edit-account"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  AccountInfoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref Authorizer
      AuthorizationType: CUSTOM
      HttpMethod: GET
      ResourceId: !Ref AccountsDetailResource
      RestApiId: !Ref Api
      OperationName: "account-info"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt ApiFunction.Arn

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - EditAccountMethod
      - DeleteAccountMethod
    Properties:
      RestApiId: !Ref Api

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "api"
      RestApiId: !Ref Api
      DeploymentId: !Ref Deployment

